{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Start API in reload mode",
            "detail": "Start API in reload mode using `./scripts/start-reload.sh` in virtual environment.",
            "type": "shell",
            "command": "poetry run ./scripts/start-reload.sh",
            "promptOnClose": false,
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "focus": false
            }
        },
        {
            "label": "Check Tensorflow GPU support",
            "detail": "Check if GPU is supported when using Tensorflow.",
            "type": "shell",
            "command": "poetry run python ../scripts/utilities/check_tensorflow_GPU_support.py",
            "promptOnClose": false,
            "presentation": {
                "panel": "shared",
                "reveal": "always",
                "focus": true
            }
        },
        {
            "label": "Start PostgreSQL DB container",
            "detail": "Use docker-compose to start only the DB container, avoiding the usage of local PostgreSQL.",
            "type": "shell",
            "command": "TARGET=development docker compose -f ${workspaceFolder:root}/docker-compose.yaml up -d db",
            "isBackground": true,
            "presentation": {
                "focus": false,
                "close": true,
                "reveal": "never",
                "panel": "shared",
            },
            "problemMatcher": []
        },
        {
            "label": "Stop PostgreSQL DB container",
            "detail": "Use docker-compose to stop DB container, avoiding the usage of local PostgreSQL.",
            "type": "shell",
            "command": "TARGET=development docker compose -f ${workspaceFolder:root}/docker-compose.yaml stop db",
            "isBackground": true,
            "presentation": {
                "focus": false,
                "close": true,
                "reveal": "never",
                "panel": "shared",
            },
            "problemMatcher": []
        }
    ]
}