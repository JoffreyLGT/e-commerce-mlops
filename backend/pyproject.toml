[tool.poetry]
name = "backend"
version = "0.1.0"
description = "API to predict a product category"
authors = ["Joffrey Lagut <j.lagut@live.fr>", "Landry <landry@test.com>", "Arnaud <arnaud@test.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
tensorflow = {version = "2.13.0"}
tensorflow-cpu-aws = {version = "2.13.0", platform = "linux"}
tensorflow-macos = {version = "2.13.0", platform = "darwin"}
tensorflow-metal = {version = "1.0.0", platform = "darwin"}
fastapi = "^0.101.1"
sqlalchemy = "^2.0.20"
alembic = "^1.11.3"
uvicorn = "^0.23.2"
tenacity = "^8.2.3"
gdown = "^4.7.1"
email-validator = "^2.0.0.post2"
psycopg2 = "^2.9.7"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"
pillow = "^10.0.0"
nltk = "^3.8.1"
pandas = "^2.0.3"
scipy = "^1.11.2"
scikit-learn = "^1.3.0"
opentelemetry-distro = "^0.40b0"
opentelemetry-exporter-otlp = "^1.19.0"
opentelemetry-instrumentation-aws-lambda = "^0.40b0"
opentelemetry-instrumentation-dbapi = "^0.40b0"
opentelemetry-instrumentation-logging = "^0.40b0"
opentelemetry-instrumentation-sqlite3 = "^0.40b0"
opentelemetry-instrumentation-urllib = "^0.40b0"
opentelemetry-instrumentation-wsgi = "^0.40b0"
opentelemetry-instrumentation-asgi = "^0.40b0"
opentelemetry-instrumentation-fastapi = "^0.40b0"
opentelemetry-instrumentation-grpc = "^0.40b0"
opentelemetry-instrumentation-jinja2 = "^0.40b0"
opentelemetry-instrumentation-psycopg2 = "^0.40b0"
opentelemetry-instrumentation-requests = "^0.40b0"
opentelemetry-instrumentation-sqlalchemy = "^0.40b0"
opentelemetry-instrumentation-system-metrics = "^0.40b0"
opentelemetry-instrumentation-tornado = "^0.40b0"
opentelemetry-instrumentation-tortoiseorm = "^0.40b0"
opentelemetry-instrumentation-urllib3 = "^0.40b0"


[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
httpx = "^0.24.1"
ruff = "^0.0.285"
black = "^23.7.0"
mypy = "^1.5.1"
pandas-stubs = "*"
types-pillow = "*"
types-pytz = "*"
types-passlib = "*"
types-python-jose = "*"
types-tensorflow = "*"
types-pygments = "*"
types-colorama = "*"
types-decorator = "*"
types-jsonschema = "*"
types-openpyxl = "*"
types-six = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Set max line length to 88 to match Black
line-length = 88

select = [
    "RUF", # ruff-specific
    "E",   # pycodestyle
    "F",   # pyflakes
    "UP",  # pyupgrade
    "I",   # isort
    "D",   # pydocstyle
    "AIR", # airflow
]
ignore = []

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "alembic",
    "**/.pytest_cache",
    "**/__pycache__",
    "/usr/local/lib/**",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11.
target-version = "py311"

# Avoid auto removal of unused imports in __init__.py
ignore-init-module-imports = true

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"app/database/base.py" = ["F401"]


[tool.pyright]
pythonVersion = "3.11"
typeCheckingMode = "strict"
include = ["app"]
exclude = ["**/.pytest_cache", "**/__pycache__", ".ruff_cache"]

[tool.pytest.ini_options]
filterwarnings = [
    # action:message:category:module:line
    "ignore::UserWarning",
    "ignore::DeprecationWarning:passlib",
    "ignore::DeprecationWarning:tensorflow",
]
