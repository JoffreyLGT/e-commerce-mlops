name: Run linter and unit tests
on: 
  workflow_dispatch:
  pull_request:

jobs:
  linter:
    name: Run linter
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository code
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=./" >> "$GITHUB_ENV"
      working-directory: ./backend

    - name: Cache pip packages
      uses: actions/cache@v3.2.4
      id: cache-pip
      with:
        path: ${{ env.pythonLocation }}
        # Editing one of the requirements file triggers a cache refresh
        key: ${{ env.pythonLocation }}-${{ hashFiles('./backend/requirements.txt') }}-${{ hashFiles('./backend/requirements-dev.txt') }}
    - name: Install pip packages
      if: steps.cache-pip.outputs.cache-hit != 'true'
      run: pip install -r ./backend/requirements.txt -r ./backend/requirements-dev.txt

    - name: Run linter
      working-directory: ./backend
      if: always()
      run: ./scripts/lint.sh

  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_SERVER: localhost
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: changethis
          POSTGRES_DB: product-classification
        ports:
          - 5432:5432

    steps:
    - name: Check out repository code
      uses: actions/checkout@v3
      
    - name: Import environment variables from ./backend/.env
      uses: falti/dotenv-action@v1.0.4
      with:
        export-variables: true
        keys-case: bypass

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=./" >> "$GITHUB_ENV"
      working-directory: ./backend

    - name: Cache pip packages
      uses: actions/cache@v3.2.4
      id: cache-pip
      with:
        path: ${{ env.pythonLocation }}
        # Editing one of the requirements file triggers a cache refresh
        key: ${{ env.pythonLocation }}-${{ hashFiles('./backend/requirements.txt') }}-${{ hashFiles('./backend/requirements-dev.txt') }}
    - name: Install pip packages
      if: steps.cache-pip.outputs.cache-hit != 'true'
      run: pip install -r ./backend/requirements.txt -r ./backend/requirements-dev.txt

    - name: Cache saved models
      uses: actions/cache@v3.2.4
      id: cache-models
      with:
        path: ./backend/datascience/data
        # Editing the script to download the model saves triggers a cache refresh
        key: -${{ hashFiles('./backend/scripts/download_models.py') }}
    - name: Download saved models
      if: steps.cache-models.outputs.cache-hit != 'true'
      run: python scripts/download_models.py 
      working-directory: ./backend

    - name: Run unit tests
      working-directory: ./backend
      if: always()
      run: ./scripts/start-tests.sh
      env:
        POSTGRES_SERVER: localhost
        POSTGRES_USER: admin
        POSTGRES_PASSWORD: changethis
        POSTGRES_DB: product-classification
