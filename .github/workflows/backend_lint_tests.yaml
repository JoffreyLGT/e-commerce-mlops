name: "Backend: static code analysis and testing"
on:
  workflow_dispatch:
  pull_request:
    paths:
    - "backend/**"

jobs:
  linter:
    name: Run linter
    runs-on: ubuntu-latest
    environment: development
    env:
      working-directory: backend
    steps:

    - name: Check out repository code
      uses: actions/checkout@v3
    - name: Setup Python
      uses: actions/setup-python@v4
      id: setup-python
      with:
        python-version: '3.11'

    - name: Install poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - uses: actions/cache@v3
      name: Define a cache for the virtual environment based on the dependencies lock file
      with:
        path: ${{env.working-directory}}/.venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles(format('{0}/poetry.lock', env.working-directory )) }}

    - name: Install the project dependencies
      run: poetry install --no-root --no-directory
      working-directory: ${{env.working-directory}}

    - name: Run linter
      working-directory: ${{env.working-directory}}
      if: success()
      run: pwd && poetry run python -m scripts.code_checking

  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    environment: development
    env:
      working-directory: ./backend
    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_SERVER: localhost
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: changethis
          POSTGRES_DB: product-classification
        ports:
          - 5432:5432

    steps:
    - name: Check out repository code
      uses: actions/checkout@v3
    - name: Setup Python
      uses: actions/setup-python@v4
      id: setup-python
      with:
        python-version: '3.11'

    - name: Install poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - uses: actions/cache@v3
      name: Define a cache for the virtual environment based on the dependencies lock file
      with:
        path: ${{env.working-directory}}/.venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles(format('{0}/poetry.lock', env.working-directory )) }}

    - name: Install the project dependencies
      run: poetry install --no-root --no-directory
      working-directory: ${{env.working-directory}}

    - name: Cache saved models
      uses: actions/cache@v3.2.4
      id: cache-models
      with:
        path: ${{env.working-directory}}/data
        # Editing the script to download the model saves triggers a cache refresh
        key: models-${{ hashFiles('./backend/scripts/download_models.py') }}

    - name: Download saved models
      if: steps.cache-models.outputs.cache-hit != 'true'
      run: poetry run python -m scripts.download_models
      working-directory: ${{env.working-directory}}

    - name: Run unit tests
      working-directory: ${{env.working-directory}}
      if: always()
      run: poetry run scripts/start-tests.sh
      env:
        POSTGRES_SERVER: localhost
        POSTGRES_USER: admin
        POSTGRES_PASSWORD: changethis
        POSTGRES_DB: product-classification
