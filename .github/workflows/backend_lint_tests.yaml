name: "Backend: static code analysis and testing"
on:
  workflow_dispatch:
  pull_request:
    paths:
    - "backend/**"

jobs:
  linter:
    name: Run linter
    runs-on: ubuntu-latest
    environment: development
    env:
      working-directory: backend
    steps:

    - name: Check out repository code
      uses: actions/checkout@v3
    - name: Setup Python
      uses: actions/setup-python@v4
      id: setup-python
      with:
        python-version: '3.11'

    - name: Install poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - uses: actions/cache@v3
      name: Define a cache for the virtual environment based on the dependencies lock file
      with:
        path: ${{env.working-directory}}/.venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles(format('{0}/poetry.lock', env.working-directory )) }}

    - name: Install the project dependencies
      run: poetry install --no-root --no-directory
      working-directory: ${{env.working-directory}}

    - name: Run linter
      working-directory: ${{env.working-directory}}
      if: success()
      run: poetry run python -m scripts.code_checking

  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    environment: development
    steps:
    - name: Check out repository code
      uses: actions/checkout@v3
    - name: Setup Python
      uses: actions/setup-python@v4
      id: setup-python
      with:
        python-version: '3.11'

    - name: Install poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Deploy project with staging configuration and run tests
      run: scripts/run-tests-in-containers.sh
